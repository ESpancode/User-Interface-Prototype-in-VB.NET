Public Class Form1

    Dim UserType As String

    Private Property loggedInName As String

    Private Property failCount As Integer

    Private Sub Label1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Label1.Click

    End Sub

    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

    End Sub

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        Dim loginDataSet As DataSet = New DataSet

        'Connecting to MS Access DB for login details and has been referenced from year 2 BP coursework

        OpenConnection()
        GetFilteredData("[Login Details]", "username=""" & TextBox1.Text & """", loginDataSet)
        If CountRecords(loginDataSet) < 1 Then 'Turn to 0 based the username not existing in the database
            loggedInName = ""
            failCount += 1
            Me.DialogResult = Windows.Forms.DialogResult.Abort
        ElseIf GetDsValue(1, 3, loginDataSet) = MaskedTextBox1.Text And GetDsValue(1, 4, loginDataSet) < 3 Then

            'getting data from the third column for password 
            'MsgBox("'Values from the record matches the said records needed in the form")

            loggedInName = TextBox1.Text()
            UserType = GetDsValue(1, 2, loginDataSet)
            UpdateData("[Login Details]", "[Login Details].BadLogin = 0", "[Login Details].Username =""" + TextBox1.Text + """")
            Me.DialogResult = Windows.Forms.DialogResult.OK
        Else
            loggedInName = ""
            If GetDsValue(1, 5, loginDataSet) <> "Owner" Then
                failCount = GetDsValue(1, 5, loginDataSet)
                failCount += 1
                UpdateData("[Login Details]", "[Login Details].BadLogin = " + failCount.ToString, "[Login Details].Username =""" + TextBox1.Text + """")
            Else
                Dim OwnerDataSet As DataSet = New DataSet

                GetFilteredData("[Login Details]", "(BadLogin < 3 AND UserType=""Owner"")", OwnerDataSet) ' get details for admins who are not locked out
                If CountRecords(OwnerDataSet) > 1 Then 'If more than 1 then the failcount is incremented
                    failCount = GetDsValue(1, 5, loginDataSet)
                    failCount += 1
                    UpdateData("[Login Details]", "[Login Details].BadLogin = " + failCount.ToString, "[Login Details].Username =""" + TextBox1.Text + """")
                Else
                    failCount += 1
                End If
            End If
            Me.DialogResult = Windows.Forms.DialogResult.Abort
        End If
        CloseCon()
        Me.Close()
    End Sub
End Class


'Database Program for the UI

Module Database
        'These methods can be used to perform common database operations...

        'Filepath and name of database - update this to contain the actual location of your database / 
        'application:
    Dim DBpath As String = "D:\Users\Sukhraj Sumal\Documents\Visual Studio 2010\Projects\PrototypeUI\PrototypeUI\Prototype Login Details.accdb"

        Dim myCon As New OleDb.OleDbConnection 'Creates a new Connection object
        'The data adaptor is used to fill a DataSet and perform other database operations...
        Dim myDataAdapter As OleDb.OleDbDataAdapter
        'The DataSet contains data retrieved from the database (using the data adaptor).

        'This function connects to the database. The connection is stored in global object 'myCon' and can
        'then be accessed as needed by other functions. Also includes an example of error handling using
        'Try-Catch.
        Function OpenConnection()
            Try
                'Specifies the connection string needed to connect to the database (including DB location)
                myCon.ConnectionString = "PROVIDER=Microsoft.ACE.OLEDB.12.0;Data Source =" & DBpath

                myCon.Open() 'connect to database
                'MsgBox("Success!", MsgBoxStyle.Information, "Connected to Database")
                Return True 'end function

            Catch ex As Exception
                'Show message box if any problems occur when connecting ('ex.Message' will display info 
                'about the error)
                MsgBox("Cannot connect to database: " & ex.Message, MsgBoxStyle.Critical, _
                "Connection Error!")
                Return False
            End Try
        End Function

        'This subroutine retrieves all data from a database table and puts it inside a DataSet 
        '(using the DataAdaptor).
        Sub GetData(ByVal DBtable As String, ByRef myDataSet As DataSet)
            'SQL statement to retrieve all data from the specified table
            Dim sql As String = "SELECT * FROM " & DBtable

            'Create instance of data adapter object using specified SQL string and database connection.
            myDataAdapter = New OleDb.OleDbDataAdapter(sql, myCon)

            'Create new DataSet
            myDataSet = New DataSet

            'Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
            myDataAdapter.Fill(myDataSet)
        End Sub

        'This subroutine retrieves records meeting the specified criteria and puts them inside a DataSet.
        'E.g. to retrieve all records with a surname beginning with A, use this code:
        '    GetFilteredData("surname LIKE 'A%'")
        Sub GetFilteredData(ByVal DBtable As String, ByVal criteria As String, ByRef myDataSet As DataSet)
            'SQL statement to retrieve data meeting the specified criteria from the specified table
            Dim sql As String = "SELECT * FROM " & DBtable & " WHERE " & criteria & ";"

            'Create instance of data adapter object using specified SQL string and database connection.
            myDataAdapter = New OleDb.OleDbDataAdapter(sql, myCon)

            'Create new DataSet
            myDataSet = New DataSet

            'Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
            myDataAdapter.Fill(myDataSet)
        End Sub

        'This function returns the number of records in the DataSet.
        Function CountRecords(ByRef myDataSet As DataSet)
            Return myDataSet.Tables(0).Rows.Count()
        End Function

        'This function returns the value of a field in a specific record in the DataSet. Use after running
        'the GetData() or GetFilteredData() subroutine above.
        '
        'E.g. To fill a textbox (called 'TextBox1') with the surname of the second user in your database, 
        'use this code: 
        '    TextBox1.Text = GetDBvalue(2,3)
        'This sets recordNum to 2 (to retrieve the details of the 2nd user), and fieldNum to 3 (to retrieve 
        'the value of the 3rd field in the DB table - the 'surname' field in this case).
        Function GetDsValue(ByVal recordNum As Integer, ByVal fieldNum As Integer, ByRef myDataSet As DataSet)
            Return myDataSet.Tables(0).Rows(recordNum - 1).Item(fieldNum - 1)
            '[Note: for simplicity, this function accepts 1-based numbers and converts them into 0-based]
        End Function

        'This subroutine adds data to a new record in the database. To run, you need to specify the names 
        'of the fields to insert (separated by commas), followed by the values of these fields 
        '(separated by commas) - e.g.
        '    AddData( "firstname, surname" , "'Ken', 'Boness'" )
        '[Note: if the field values are strings, remember to surround them with quotes (as shown) - ' ]
        Sub AddData(ByVal DBtable As String, ByVal fieldNames As String, ByVal fieldVals As String)
            'Assemble SQL query to add data to the database based on the values passed to this function.
            Dim sql As String = "INSERT INTO " & DBtable & " (" & fieldNames & ") VALUES (" & fieldVals & ")"

            'Create an instance of data adapter (if not created already)
            myDataAdapter = New OleDb.OleDbDataAdapter()

            'Add command to insert data (using data adaptor) based on SQL query above.
            myDataAdapter.InsertCommand = New OleDb.OleDbCommand(sql, myCon)
            'Execute command to insert data into a new database record
            myDataAdapter.InsertCommand.ExecuteNonQuery()
        End Sub

        'This subroutine updates the specified record(s) with new values. To run, you need to specify the 
        'new value(s)of the relevant field(s), as well as which record(s) to update - e.g.
        '    UpdateData( "surname = 'Boness'" , "id = 1" )
        'This will change the surname of record 1 to 'Boness' (note the arrangement of quotes)
        Sub UpdateData(ByVal DBtable As String, ByVal dataToUpdate As String, ByVal updateCriteria As String)
            'Assemble SQL query to update the specified record(s) with the specified value(s)
            Dim sql As String = "UPDATE " & DBtable & " SET " & dataToUpdate & " WHERE " & updateCriteria

            'Create an instance of data adapter (if not created already)
            myDataAdapter = New OleDb.OleDbDataAdapter()

            'Add command to update data (using data adaptor) based on SQL query above.
            myDataAdapter.UpdateCommand = New OleDb.OleDbCommand(sql, myCon)
            'Execute command to update data in the relevant database record(s)
            myDataAdapter.UpdateCommand.ExecuteNonQuery()
        End Sub

        'Closes the database connection - it is a good idea to do this when no longer required...
        Sub CloseCon()
            myCon.Close()
        End Sub

    End Module
